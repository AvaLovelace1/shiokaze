/*
**	ordering_driver.h
**
**	This is part of Shiokaze, a research-oriented fluid solver for computer graphics.
**	Created by Ryoichi Ando <rand@nii.ac.jp> on Feb 1, 2017.
**
**	Permission is hereby granted, free of charge, to any person obtaining a copy of
**	this software and associated documentation files (the "Software"), to deal in
**	the Software without restriction, including without limitation the rights to use,
**	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
**	Software, and to permit persons to whom the Software is furnished to do so,
**	subject to the following conditions:
**
**	The above copyright notice and this permission notice shall be included in all copies
**	or substantial portions of the Software.
**
**	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
**	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
**	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
**	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
**	CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
**	OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
//
#ifndef SHKZ_ORDERING_DRIVER_H
#define SHKZ_ORDERING_DRIVER_H
//
#include "ordering_core.h"
//
SHKZ_BEGIN_NAMESPACE
//
/** @file */
/// \~english @brief configurable class that aids the use of ordering_core.
/// \~japanese @brief ordering_core の使用を支援する configurable クラス。
class ordering_driver : public configurable {
public:
	/**
	 \~english @brief Constructor for ordering_driver.
	 @param[in] parent Pointer to an instance of recursive_configurable. 
	 \~japanese @brief ordering_driver のコンストラクタ。
	 @param[in] recursive_configurable のインスタンスへのポインタ。
	*/
	ordering_driver ( recursive_configurable *parent ) {
		parent->add_child(this);
	}
	/**
	 \~english @brief Constructor for ordering_driver.
	 \~japanese @brief ordering_driver のコンストラクタ。
	*/
	ordering_driver () {
		configurable::setup_now(this);
	}
	/**
	 \~english @brief Get an instance to ordering_core.
	 @return Const reference to the internal instance of ordering_core.
	 \~japanese @brief ordering_core へのインスタンスを取得する。
	 @return 内部で保持されている ordering_core のインスタンスへの const な参照。
	*/
	const ordering_core& operator()() const {
		return *m_ordering_dispatcher.get();
	}
	/**
	 \~english @brief Allocate a new context of a two dimensional shape.
	 @param[in] shape Shape.
	 \~japanese @brief 2次元形状のコンテクストを作成する。
	 @param[in] shape 形。
	 */
	const void* new_context( const shape2& shape ) const {
		return m_ordering_dispatcher->new_context(shape);
	}
	/**
	 \~english @brief Allocate a new context of a three dimensional shape.
	 @param[in] shape Shape.
	 \~japanese @brief 3次元形状のコンテクストを作成する。
	 @param[in] shape 形。
	 */
	const void* new_context( const shape3& shape ) const {
		return m_ordering_dispatcher->new_context(shape);
	}
	/**
	 \~english @brief Deallocate the context generated by new_context.
	 @param[in] context Context generated by new_context.
	 \~japanese @brief new_context で作成されたコンテクストを解放する。
	 @param[in] context new_context で作成されたコンテクスト。
	 */
	void delete_context( const void *context ) const {
		return m_ordering_dispatcher->delete_context(context);
	}
	/**
	 \~english @brief Get encoder function for a two dimensional context.
	 @param[in] context Context generated by new_context.
	 @return Encoder function.
	 \~japanese @brief 2次元コンテクストからエンコード関数を取得する。
	 @param[in] context new_context で作成されたコンテクスト。
	 @return エンコード関数。
	 */
	std::function<size_t(const void *context, int i, int j)> get_encoder_func2( const void *context ) const {
		return m_ordering_dispatcher->get_encoder_func2(context);
	}
	/**
	 \~english @brief Get encoder function for a three dimensional context.
	 @param[in] context Context generated by new_context.
	 @return Encoder function.
	 \~japanese @brief 3次元コンテクストからエンコード関数を取得する。
	 @param[in] context new_context で作成されたコンテクスト。
	 @return エンコード関数。
	 */
	std::function<size_t(const void *context, int i, int j, int k)> get_encoder_func3( const void *context ) const {
		return m_ordering_dispatcher->get_encoder_func3(context);
	}
	/**
	 \~english @brief Get the two dimensional decoder function with respect to the context generated by new_context.
	 @param[in] context Context generated by new_context.
	 @return Collection of decoder functions.
	 \~japanese @brief new_context で作成されたコンテクストに対する2次元のデコーダー関数を取得する。
	 @param[in] context new_context で作成されたコンテクスト。
	 @return デコード関数群。
	 */
	std::vector<ordering_core::decoder_func2> get_decoder_func2( const void *context ) const {
		return m_ordering_dispatcher->get_decoder_func2(context);
	}
	/**
	 \~english @brief Get the three dimensional decoder function with respect to the context generated by new_context.
	 @param[in] context Context generated by new_context.
	 @return Collection of decoder functions.
	 \~japanese @brief new_context で作成されたコンテクストに対する3次元のデコーダー関数を取得する。
	 @param[in] context new_context で作成されたコンテクスト。
	 @return デコード関数群。
	 */
	std::vector<ordering_core::decoder_func3> get_decoder_func3( const void *context ) const {
		return m_ordering_dispatcher->get_decoder_func3(context);
	}
	//
private:
	//
	ordering_ptr m_ordering_dispatcher;
	//
	virtual void load( configuration &config ) override {
		m_ordering_dispatcher = ordering_core::quick_load_module(config,"lineordering");
	}
};
//
SHKZ_END_NAMESPACE
//
#endif
//