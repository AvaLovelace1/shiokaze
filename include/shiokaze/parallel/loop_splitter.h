/*
**	loop_splitter.h
**
**	This is part of Shiokaze, a research-oriented fluid solver for computer graphics.
**	Created by Ryoichi Ando <rand@nii.ac.jp> on March 8, 2018. 
**
**	Permission is hereby granted, free of charge, to any person obtaining a copy of
**	this software and associated documentation files (the "Software"), to deal in
**	the Software without restriction, including without limitation the rights to use,
**	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
**	Software, and to permit persons to whom the Software is furnished to do so,
**	subject to the following conditions:
**
**	The above copyright notice and this permission notice shall be included in all copies
**	or substantial portions of the Software.
**
**	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
**	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
**	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
**	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
**	CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
**	OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
//
#ifndef SHKZ_LOOP_SPLITTER_H
#define SHKZ_LOOP_SPLITTER_H
//
#include <shiokaze/core/recursive_configurable_module.h>
#include <functional>
//
SHKZ_BEGIN_NAMESPACE
//
/** @file */
/// \~english @brief Abstract class that handles how to distribute loop enumeration for parallel processings. "sequential_splitter", "dispersed_splitter" are provided as implementations.
/// \~japanese @brief 並列処理のためのループの分散を扱う抽象クラス。"sequential_splitter" と "dispersed_splitter" が実装として提供される。
class loop_splitter : public recursive_configurable_module {
public:
	//
	DEFINE_MODULE(loop_splitter,"Parallel Loop Splitter","Loop","Parallel loop splitter module")
	/**
	 \~english @brief Allocate a new context for a loop.
	 @param[in] size Size of the entire loop.
	 @param[in] num_threadsa Number of threads.
	 \~japanese @brief ループの新しいコンテクストを作成する。
	 @param[in] size ループ全体の大きさ。
	 @param[in] num_threads スレッドの数。
	 */
	virtual const void* new_context ( size_t size, int num_threads ) const = 0;
	/**
	 \~english @brief Get a function that provides us the starting index of a loop for the specific thread.
	 @param[in] context Context generated by new_context.
	 @return Function that provides us the starting index.
	 \~japanese @brief 指定されたスレッドに関してループの最初のインデックスを提供する関数を取得する。
	 @param[in] context new_context で作成されたコンテクスト。
	 @return 最初のインデックスを返す関数。
	 */
	virtual std::function<size_t(const void *context, int thread_index)> get_start_func( const void *context ) const = 0;
	/**
	 \~english @brief Get a function that advances an index of a loop.
	 @param[in] context Context generated by new_context.
	 @return Function that advances an index.
	 \~japanese @brief ループのインデックスを進める関数を取得する。
	 @param[in] context new_context で作成されたコンテクスト。
	 @return ループのインデックスを進める関数。
	 */
	virtual std::function<bool(const void *context, size_t &n, int thread_index)> get_advance_func( const void *context ) const = 0;
	/**
	 \~english @brief Deallocate the context generated by new_context.
	 @param[in] context Context generated by new_context.
	 \~japanese @brief new_context で作成されたコンテクストを解放する。
	 @param[in] context new_context で作成されたコンテクスト。
	 */
	virtual void delete_context( const void *context ) const = 0;
};
//
using loop_splitter_ptr = std::unique_ptr<loop_splitter>;
//
SHKZ_END_NAMESPACE
//
#endif
//